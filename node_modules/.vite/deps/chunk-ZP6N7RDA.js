import {
  Generate,
  configReducer,
  coreReducer,
  createId,
  defaultMapStateToEnumCellProps,
  i18nReducer,
  index,
  mapDispatchToArrayControlProps,
  mapDispatchToControlProps,
  mapDispatchToMultiEnumProps,
  mapStateToAllOfProps,
  mapStateToAnyOfProps,
  mapStateToArrayControlProps,
  mapStateToArrayLayoutProps,
  mapStateToCellProps,
  mapStateToControlProps,
  mapStateToControlWithDetailProps,
  mapStateToDispatchCellProps,
  mapStateToEnumControlProps,
  mapStateToJsonFormsRendererProps,
  mapStateToLabelProps,
  mapStateToLayoutProps,
  mapStateToMasterListItemProps,
  mapStateToMultiEnumControlProps,
  mapStateToOneOfEnumCellProps,
  mapStateToOneOfEnumControlProps,
  mapStateToOneOfProps,
  removeId,
  require_maxBy
} from "./chunk-4ZOMNN7U.js";
import {
  computed,
  createBlock,
  createElementBlock,
  defineComponent,
  guardReactiveProps,
  inject,
  normalizeProps,
  onBeforeMount,
  onUnmounted,
  openBlock,
  ref,
  resolveComponent,
  resolveDynamicComponent
} from "./chunk-G4DFXOZZ.js";
import {
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/@jsonforms/vue/lib/jsonforms-vue.esm.js
var import_maxBy = __toESM(require_maxBy());
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
var script$3 = defineComponent({
  name: "unknown-renderer"
});
function render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, "No applicable renderer found.");
}
script$3.render = render$3;
var _excluded = ["control"];
var _excluded2 = ["control"];
var _excluded3 = ["control"];
var _excluded4 = ["rootSchema"];
var _excluded5 = ["control"];
var _excluded6 = ["control"];
var _excluded7 = ["control"];
var _excluded8 = ["control"];
var _excluded9 = ["control"];
var rendererProps = function rendererProps2() {
  return {
    schema: {
      required: true,
      type: [Object, Boolean]
    },
    uischema: {
      required: true,
      type: Object
    },
    path: {
      required: true,
      type: String
    },
    enabled: {
      required: false,
      type: Boolean,
      "default": void 0
    },
    renderers: {
      required: false,
      type: Array,
      "default": void 0
    },
    cells: {
      required: false,
      type: Array,
      "default": void 0
    },
    config: {
      required: false,
      type: Object,
      "default": void 0
    }
  };
};
var masterListItemProps = function masterListItemProps2() {
  return {
    index: {
      required: true,
      type: Number
    },
    selected: {
      required: true,
      type: Boolean
    },
    path: {
      required: true,
      type: String
    },
    schema: {
      required: true,
      type: [Object, Boolean]
    },
    handleSelect: {
      required: false,
      type: Function,
      "default": void 0
    },
    removeItem: {
      required: false,
      type: Function,
      "default": void 0
    }
  };
};
function useControl(props, stateMap, dispatchMap) {
  var jsonforms = inject("jsonforms");
  var dispatch2 = inject("dispatch");
  if (!jsonforms || !dispatch2) {
    throw "'jsonforms' or 'dispatch' couldn't be injected. Are you within JSON Forms?";
  }
  var id = ref(void 0);
  var control = computed(function() {
    return _objectSpread2(_objectSpread2(_objectSpread2({}, props), stateMap({
      jsonforms
    }, props)), {}, {
      id: id.value
    });
  });
  var dispatchMethods = dispatchMap === null || dispatchMap === void 0 ? void 0 : dispatchMap(dispatch2);
  onBeforeMount(function() {
    if (control.value.uischema.scope) {
      id.value = createId(control.value.uischema.scope);
    }
  });
  onUnmounted(function() {
    if (id.value) {
      removeId(id.value);
      id.value = void 0;
    }
  });
  return _objectSpread2({
    control
  }, dispatchMethods);
}
var useJsonFormsControl = function useJsonFormsControl2(props) {
  return useControl(props, mapStateToControlProps, mapDispatchToControlProps);
};
var useJsonFormsControlWithDetail = function useJsonFormsControlWithDetail2(props) {
  return useControl(props, mapStateToControlWithDetailProps, mapDispatchToControlProps);
};
var useJsonFormsEnumControl = function useJsonFormsEnumControl2(props) {
  return useControl(props, mapStateToEnumControlProps, mapDispatchToControlProps);
};
var useJsonFormsOneOfEnumControl = function useJsonFormsOneOfEnumControl2(props) {
  return useControl(props, mapStateToOneOfEnumControlProps, mapDispatchToControlProps);
};
var useJsonFormsArrayControl = function useJsonFormsArrayControl2(props) {
  return useControl(props, mapStateToArrayControlProps, mapDispatchToArrayControlProps);
};
var useJsonFormsAllOfControl = function useJsonFormsAllOfControl2(props) {
  return useControl(props, mapStateToAllOfProps, mapDispatchToControlProps);
};
var useJsonFormsAnyOfControl = function useJsonFormsAnyOfControl2(props) {
  return useControl(props, mapStateToAnyOfProps, mapDispatchToControlProps);
};
var useJsonFormsOneOfControl = function useJsonFormsOneOfControl2(props) {
  return useControl(props, mapStateToOneOfProps, mapDispatchToControlProps);
};
var useJsonFormsMultiEnumControl = function useJsonFormsMultiEnumControl2(props) {
  return useControl(props, mapStateToMultiEnumControlProps, mapDispatchToMultiEnumProps);
};
var useJsonFormsLayout = function useJsonFormsLayout2(props) {
  var _useControl = useControl(props, mapStateToLayoutProps), control = _useControl.control, other = _objectWithoutProperties(_useControl, _excluded);
  return _objectSpread2({
    layout: control
  }, other);
};
var useJsonFormsArrayLayout = function useJsonFormsArrayLayout2(props) {
  var _useControl2 = useControl(props, mapStateToArrayLayoutProps), control = _useControl2.control, other = _objectWithoutProperties(_useControl2, _excluded2);
  return _objectSpread2({
    layout: control
  }, other);
};
var useJsonFormsMasterListItem = function useJsonFormsMasterListItem2(props) {
  var _useControl3 = useControl(props, mapStateToMasterListItemProps), control = _useControl3.control, other = _objectWithoutProperties(_useControl3, _excluded3);
  return _objectSpread2({
    item: control
  }, other);
};
var useJsonFormsRenderer = function useJsonFormsRenderer2(props) {
  var jsonforms = inject("jsonforms");
  var dispatch2 = inject("dispatch");
  if (!jsonforms || !dispatch2) {
    throw "'jsonforms' or 'dispatch' couldn't be injected. Are you within JSON Forms?";
  }
  var rawProps = computed(function() {
    return mapStateToJsonFormsRendererProps({
      jsonforms
    }, props);
  });
  var rootSchema = computed(function() {
    return rawProps.value.rootSchema;
  });
  var renderer = computed(function() {
    var _rawProps$value = rawProps.value;
    _rawProps$value.rootSchema;
    var rest = _objectWithoutProperties(_rawProps$value, _excluded4);
    return rest;
  });
  return {
    renderer,
    rootSchema
  };
};
var useJsonFormsLabel = function useJsonFormsLabel2(props) {
  var _useControl4 = useControl(props, mapStateToLabelProps), control = _useControl4.control, other = _objectWithoutProperties(_useControl4, _excluded5);
  return _objectSpread2({
    label: control
  }, other);
};
var useJsonFormsCell = function useJsonFormsCell2(props) {
  var _useControl5 = useControl(props, mapStateToCellProps, mapDispatchToControlProps), control = _useControl5.control, other = _objectWithoutProperties(_useControl5, _excluded6);
  return _objectSpread2({
    cell: control
  }, other);
};
var useJsonFormsEnumCell = function useJsonFormsEnumCell2(props) {
  var _useControl6 = useControl(props, defaultMapStateToEnumCellProps, mapDispatchToControlProps), control = _useControl6.control, other = _objectWithoutProperties(_useControl6, _excluded7);
  return _objectSpread2({
    cell: control
  }, other);
};
var useJsonFormsOneOfEnumCell = function useJsonFormsOneOfEnumCell2(props) {
  var _useControl7 = useControl(props, mapStateToOneOfEnumCellProps, mapDispatchToControlProps), control = _useControl7.control, other = _objectWithoutProperties(_useControl7, _excluded8);
  return _objectSpread2({
    cell: control
  }, other);
};
var useJsonFormsDispatchCell = function useJsonFormsDispatchCell2(props) {
  var _useControl8 = useControl(props, mapStateToDispatchCellProps, mapDispatchToControlProps), control = _useControl8.control, other = _objectWithoutProperties(_useControl8, _excluded9);
  return _objectSpread2({
    cell: control
  }, other);
};
var script$2 = defineComponent({
  name: "dispatch-renderer",
  props: _objectSpread2({}, rendererProps()),
  setup: function setup(props) {
    return useJsonFormsRenderer(props);
  },
  computed: {
    determinedRenderer: function determinedRenderer() {
      var _this = this;
      var testerContext = {
        rootSchema: this.rootSchema,
        config: this.config
      };
      var renderer = (0, import_maxBy.default)(this.renderer.renderers, function(r) {
        return r.tester(_this.renderer.uischema, _this.renderer.schema, testerContext);
      });
      if (renderer === void 0 || renderer.tester(this.renderer.uischema, this.renderer.schema, testerContext) === -1) {
        return script$3;
      } else {
        return renderer.renderer;
      }
    }
  }
});
function render$2(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.determinedRenderer), normalizeProps(guardReactiveProps(_ctx.renderer)), null, 16);
}
script$2.render = render$2;
var script$1 = defineComponent({
  name: "dispatch-cell",
  props: _objectSpread2({}, rendererProps()),
  setup: function setup2(props) {
    return useJsonFormsDispatchCell(props);
  },
  computed: {
    determinedCell: function determinedCell() {
      var _this = this;
      var testerContext = {
        rootSchema: this.cell.rootSchema,
        config: this.config
      };
      var cell = (0, import_maxBy.default)(this.cell.cells, function(r) {
        return r.tester(_this.cell.uischema, _this.cell.schema, testerContext);
      });
      if (cell === void 0 || cell.tester(this.cell.uischema, this.cell.schema, testerContext) === -1) {
        return script$3;
      } else {
        return cell.cell;
      }
    }
  }
});
function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.determinedCell), normalizeProps(guardReactiveProps(_ctx.cell)), null, 16);
}
script$1.render = render$1;
var isObject = function isObject2(elem) {
  return elem && _typeof(elem) === "object";
};
var script = defineComponent({
  name: "json-forms",
  components: {
    DispatchRenderer: script$2
  },
  emits: ["change"],
  props: {
    data: {
      required: true,
      type: [String, Number, Boolean, Array, Object]
    },
    schema: {
      required: false,
      type: [Object, Boolean],
      "default": void 0
    },
    uischema: {
      required: false,
      type: Object,
      "default": void 0
    },
    renderers: {
      required: true,
      type: Array
    },
    cells: {
      required: false,
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    config: {
      required: false,
      type: Object,
      "default": void 0
    },
    readonly: {
      required: false,
      type: Boolean,
      "default": false
    },
    uischemas: {
      required: false,
      type: Array,
      "default": function _default2() {
        return [];
      }
    },
    validationMode: {
      required: false,
      type: String,
      "default": "ValidateAndShow"
    },
    ajv: {
      required: false,
      type: Object,
      "default": void 0
    },
    i18n: {
      required: false,
      type: Object,
      "default": void 0
    },
    additionalErrors: {
      required: false,
      type: Array,
      "default": function _default3() {
        return [];
      }
    }
  },
  data: function data() {
    var _this$schema, _this$uischema, _this = this, _this$i18n, _this$i18n2, _this$i18n3;
    var generatorData = isObject(this.data) ? this.data : {};
    var schemaToUse = (_this$schema = this.schema) !== null && _this$schema !== void 0 ? _this$schema : Generate.jsonSchema(generatorData);
    var uischemaToUse = (_this$uischema = this.uischema) !== null && _this$uischema !== void 0 ? _this$uischema : Generate.uiSchema(schemaToUse);
    var initCore = function initCore2() {
      var initialCore = {
        data: _this.data,
        schema: schemaToUse,
        uischema: uischemaToUse
      };
      var core = coreReducer(initialCore, index.init(_this.data, schemaToUse, uischemaToUse, {
        validationMode: _this.validationMode,
        ajv: _this.ajv,
        additionalErrors: _this.additionalErrors
      }));
      return core;
    };
    return {
      schemaToUse,
      uischemaToUse,
      jsonforms: {
        core: initCore(),
        config: configReducer(void 0, index.setConfig(this.config)),
        i18n: i18nReducer(this.i18n, index.updateI18n((_this$i18n = this.i18n) === null || _this$i18n === void 0 ? void 0 : _this$i18n.locale, (_this$i18n2 = this.i18n) === null || _this$i18n2 === void 0 ? void 0 : _this$i18n2.translate, (_this$i18n3 = this.i18n) === null || _this$i18n3 === void 0 ? void 0 : _this$i18n3.translateError)),
        renderers: this.renderers,
        cells: this.cells,
        uischemas: this.uischemas,
        readonly: this.readonly
      }
    };
  },
  watch: {
    schema: function schema(newSchema) {
      var generatorData = isObject(this.data) ? this.data : {};
      this.schemaToUse = newSchema !== null && newSchema !== void 0 ? newSchema : Generate.jsonSchema(generatorData);
      if (!this.uischema) {
        this.uischemaToUse = Generate.uiSchema(this.schemaToUse);
      }
    },
    uischema: function uischema(newUischema) {
      this.uischemaToUse = newUischema !== null && newUischema !== void 0 ? newUischema : Generate.uiSchema(this.schemaToUse);
    },
    renderers: function renderers(newRenderers) {
      this.jsonforms.renderers = newRenderers;
    },
    cells: function cells(newCells) {
      this.jsonforms.cells = newCells;
    },
    uischemas: function uischemas(newUischemas) {
      this.jsonforms.uischemas = newUischemas;
    },
    config: {
      handler: function handler(newConfig) {
        this.jsonforms.config = configReducer(void 0, index.setConfig(newConfig));
      },
      deep: true
    },
    readonly: function readonly(newReadonly) {
      this.jsonforms.readonly = newReadonly;
    },
    coreDataToUpdate: function coreDataToUpdate() {
      this.jsonforms.core = coreReducer(this.jsonforms.core, index.updateCore(this.data, this.schemaToUse, this.uischemaToUse, {
        validationMode: this.validationMode,
        ajv: this.ajv,
        additionalErrors: this.additionalErrors
      }));
    },
    eventToEmit: function eventToEmit(newEvent) {
      this.$emit("change", newEvent);
    },
    i18n: {
      handler: function handler2(newI18n) {
        this.jsonforms.i18n = i18nReducer(this.jsonforms.i18n, index.updateI18n(newI18n === null || newI18n === void 0 ? void 0 : newI18n.locale, newI18n === null || newI18n === void 0 ? void 0 : newI18n.translate, newI18n === null || newI18n === void 0 ? void 0 : newI18n.translateError));
      },
      deep: true
    }
  },
  computed: {
    coreDataToUpdate: function coreDataToUpdate2() {
      return [this.data, this.schemaToUse, this.uischemaToUse, this.validationMode, this.ajv, this.additionalErrors];
    },
    eventToEmit: function eventToEmit2() {
      return {
        data: this.jsonforms.core.data,
        errors: this.jsonforms.core.errors
      };
    }
  },
  mounted: function mounted() {
    this.$emit("change", {
      data: this.jsonforms.core.data,
      errors: this.jsonforms.core.errors
    });
  },
  methods: {
    dispatch: function dispatch(action) {
      this.jsonforms.core = coreReducer(this.jsonforms.core, action);
    }
  },
  provide: function provide() {
    return {
      jsonforms: this.jsonforms,
      dispatch: this.dispatch
    };
  }
});
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_dispatch_renderer = resolveComponent("dispatch-renderer");
  return openBlock(), createBlock(_component_dispatch_renderer, {
    schema: _ctx.jsonforms.core.schema,
    uischema: _ctx.jsonforms.core.uischema,
    path: ""
  }, null, 8, ["schema", "uischema"]);
}
script.render = render;

export {
  script$3,
  rendererProps,
  masterListItemProps,
  useControl,
  useJsonFormsControl,
  useJsonFormsControlWithDetail,
  useJsonFormsEnumControl,
  useJsonFormsOneOfEnumControl,
  useJsonFormsArrayControl,
  useJsonFormsAllOfControl,
  useJsonFormsAnyOfControl,
  useJsonFormsOneOfControl,
  useJsonFormsMultiEnumControl,
  useJsonFormsLayout,
  useJsonFormsArrayLayout,
  useJsonFormsMasterListItem,
  useJsonFormsRenderer,
  useJsonFormsLabel,
  useJsonFormsCell,
  useJsonFormsEnumCell,
  useJsonFormsOneOfEnumCell,
  useJsonFormsDispatchCell,
  script$2,
  script$1,
  script
};
//# sourceMappingURL=chunk-ZP6N7RDA.js.map
