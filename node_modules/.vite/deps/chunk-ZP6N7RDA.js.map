{
  "version": 3,
  "sources": ["../../@jsonforms/vue/src/components/UnknownRenderer.vue", "../../@jsonforms/vue/src/components/UnknownRenderer.vue?vue&type=template&id=5aeb9b05&lang.js", "../../@jsonforms/vue/src/jsonFormsCompositions.ts", "../../@jsonforms/vue/src/components/DispatchRenderer.vue", "../../@jsonforms/vue/src/components/DispatchRenderer.vue?vue&type=template&id=1c643656&lang.js", "../../@jsonforms/vue/src/components/DispatchCell.vue", "../../@jsonforms/vue/src/components/DispatchCell.vue?vue&type=template&id=2733a3b4&lang.js", "../../@jsonforms/vue/src/components/JsonForms.vue", "../../@jsonforms/vue/src/components/JsonForms.vue?vue&type=template&id=4e97bc75&lang.js"],
  "sourcesContent": ["<template>\n  <div>No applicable renderer found.</div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  name: 'unknown-renderer'\n});\n</script>\n", "<template>\n  <div>No applicable renderer found.</div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  name: 'unknown-renderer'\n});\n</script>\n", "import {\n  ControlElement,\n  Dispatch,\n  Layout,\n  mapDispatchToControlProps,\n  mapStateToControlProps,\n  mapStateToLayoutProps,\n  JsonFormsSubStates,\n  JsonSchema,\n  UISchemaElement,\n  CoreActions,\n  mapStateToEnumControlProps,\n  JsonFormsState,\n  mapStateToOneOfEnumControlProps,\n  OwnPropsOfMasterListItem,\n  mapStateToMasterListItemProps,\n  mapStateToControlWithDetailProps,\n  mapStateToArrayControlProps,\n  mapDispatchToArrayControlProps,\n  mapStateToAllOfProps,\n  mapStateToAnyOfProps,\n  mapStateToOneOfProps,\n  mapStateToJsonFormsRendererProps,\n  mapStateToArrayLayoutProps,\n  mapStateToCellProps,\n  JsonFormsRendererRegistryEntry,\n  JsonFormsCellRendererRegistryEntry,\n  defaultMapStateToEnumCellProps,\n  mapStateToDispatchCellProps,\n  mapStateToOneOfEnumCellProps,\n  StatePropsOfJsonFormsRenderer,\n  createId,\n  removeId,\n  mapStateToMultiEnumControlProps,\n  mapDispatchToMultiEnumProps,\n  mapStateToLabelProps,\n  LabelElement\n} from '@jsonforms/core';\nimport {\n  PropType,\n  computed,\n  inject,\n  onBeforeMount,\n  onUnmounted,\n  ref\n} from 'vue';\n\n/**\n * Constructs a props declaration for Vue components which can be used\n * for registered renderers and cells. These are typically used in combination\n * with one of the provided bindings, e.g. 'useJsonFormsControl'.\n *\n * Use the generic type parameter when using a specialized binding, e.g.\n * `rendererProps<Layout>()` in combination with `useJsonFormsLayout` or\n * `rendererProps<ControlElement>()` in combination with `useJsonFormsControl`.\n */\nexport const rendererProps = <U = UISchemaElement>() => ({\n  schema: {\n    required: true as true,\n    type: [Object, Boolean] as PropType<\n      JsonSchema\n    >\n  },\n  uischema: {\n    required: true as true,\n    type: Object as PropType<U>\n  },\n  path: {\n    required: true as true,\n    type: String\n  },\n  enabled: {\n    required: false as false,\n    type: Boolean,\n    default: undefined\n  },\n  renderers: {\n    required: false,\n    type: Array as PropType<JsonFormsRendererRegistryEntry[]>,\n    default: undefined\n  },\n  cells: {\n    required: false,\n    type: Array as PropType<\n      JsonFormsCellRendererRegistryEntry[]\n    >,\n    default: undefined\n  },\n  config: {\n    required: false,\n    type: Object,\n    default: undefined\n  }\n});\n\n/**\n * Constructs a props declaration for Vue components which shall be used as\n * master list items.\n */\nexport const masterListItemProps = () => ({\n  index: {\n    required: true as true,\n    type: Number\n  },\n  selected: {\n    required: true as true,\n    type: Boolean\n  },\n  path: {\n    required: true as true,\n    type: String\n  },\n  schema: {\n    required: true as true,\n    type: [Object, Boolean] as PropType<\n      JsonSchema\n    >\n  },\n  handleSelect: {\n    required: false as false,\n    type: Function as PropType<(index: number) => void>,\n    default: undefined\n  },\n  removeItem: {\n    required: false as false,\n    type: Function as PropType<\n      (path: string, value: number) => void\n    >,\n    default: undefined\n  }\n});\n\nexport interface RendererProps<U = UISchemaElement> {\n  schema: JsonSchema;\n  uischema: U;\n  path: string;\n  enabled?: boolean;\n  renderers?: JsonFormsRendererRegistryEntry[];\n  cells?: JsonFormsCellRendererRegistryEntry[];\n  config?: any;\n}\n\nexport interface ControlProps extends RendererProps {\n  uischema: ControlElement;\n}\n\nexport type Required<T> = T extends object\n  ? { [P in keyof T]-?: NonNullable<T[P]> }\n  : T;\n\nexport function useControl<R, D, P extends {}>(\n  props: P,\n  stateMap: (state: JsonFormsState, props: P) => R\n): { control: Required<R> };\nexport function useControl<R, D, P extends {}>(\n  props: P,\n  stateMap: (state: JsonFormsState, props: P) => R,\n  dispatchMap: (dispatch: Dispatch<CoreActions>) => D\n): { control: Required<R> } & D;\nexport function useControl<R, D, P extends {}>(\n  props: P,\n  stateMap: (state: JsonFormsState, props: P) => R,\n  dispatchMap?: (dispatch: Dispatch<CoreActions>) => D\n) {\n  const jsonforms = inject<JsonFormsSubStates>('jsonforms');\n  const dispatch = inject<Dispatch<CoreActions>>('dispatch');\n\n  if (!jsonforms || !dispatch) {\n    throw \"'jsonforms' or 'dispatch' couldn't be injected. Are you within JSON Forms?\";\n  }\n\n  const id = ref<string | undefined>(undefined);\n  const control = computed(() => ({\n    ...props,\n    ...stateMap({ jsonforms }, props),\n    id: id.value\n  }));\n\n  const dispatchMethods = dispatchMap?.(dispatch);\n\n  onBeforeMount(() => {\n    if ((control.value as any).uischema.scope) {\n      id.value = createId((control.value as any).uischema.scope);\n    }\n  });\n\n  onUnmounted(() => {\n    if (id.value) {\n      removeId(id.value);\n      id.value = undefined;\n    }\n  });\n\n  return {\n    control: (control as unknown) as R,\n    ...dispatchMethods\n  };\n}\n\n/**\n * Provides generic bindings for 'Control' elements.\n * Should be used when no specialized bindings are appropriate.\n *\n * Access bindings via the provided reactive `control` object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsControl = (props: ControlProps) => {\n  return useControl(props, mapStateToControlProps, mapDispatchToControlProps);\n};\n\n/**\n * Provides bindings for 'Control' elements which can provide a 'detail',\n * for example array and object renderers.\n *\n * Access bindings via the provided reactive `control` object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsControlWithDetail = (props: ControlProps) => {\n  return useControl(\n    props,\n    mapStateToControlWithDetailProps,\n    mapDispatchToControlProps\n  );\n};\n\n/**\n * Provides bindings for 'Control' elements which resolve to 'enum' schema elements.\n *\n * Access bindings via the provided reactive `control` object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsEnumControl = (props: ControlProps) => {\n  return useControl(\n    props,\n    mapStateToEnumControlProps,\n    mapDispatchToControlProps\n  );\n};\n\n/**\n * Provides bindings for 'Control' elements which resolve to manually constructed\n * 'oneOf' enums. These are used to enhance enums with label support.\n *\n * Access bindings via the provided reactive `control` object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsOneOfEnumControl = (props: ControlProps) => {\n  return useControl(\n    props,\n    mapStateToOneOfEnumControlProps,\n    mapDispatchToControlProps\n  );\n};\n\n/**\n * Provides bindings for 'Control' elements which resolve to 'array' schema elements.\n *\n * Access bindings via the provided reactive `control` object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsArrayControl = (props: ControlProps) => {\n  return useControl(\n    props,\n    mapStateToArrayControlProps,\n    mapDispatchToArrayControlProps\n  );\n};\n\n/**\n * Provides bindings for 'Control' elements which resolve to 'allOf' schema elements.\n *\n * Access bindings via the provided reactive `control` object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsAllOfControl = (props: ControlProps) => {\n  return useControl(props, mapStateToAllOfProps, mapDispatchToControlProps);\n};\n\n/**\n * Provides bindings for 'Control' elements which resolve to 'anyOf' schema elements.\n *\n * Access bindings via the provided reactive `control` object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsAnyOfControl = (props: ControlProps) => {\n  return useControl(props, mapStateToAnyOfProps, mapDispatchToControlProps);\n};\n\n/**\n * Provides bindings for 'Control' elements which resolve to 'oneOf' schema elements.\n *\n * Access bindings via the provided reactive `control` object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsOneOfControl = (props: ControlProps) => {\n  return useControl(props, mapStateToOneOfProps, mapDispatchToControlProps);\n};\n\n/**\n * Provides bindings for 'Control' elements which resolve to multiple choice enums.\n *\n * Access bindings via the provided reactive `control` object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsMultiEnumControl = (props: ControlProps) => {\n  return useControl(props, mapStateToMultiEnumControlProps, mapDispatchToMultiEnumProps);\n};\n\nexport interface LayoutProps extends RendererProps {\n  uischema: Layout;\n}\n\n/**\n * Provides bindings for 'Layout' elements, e.g. VerticalLayout, HorizontalLayout, Group.\n *\n * Access bindings via the provided reactive 'layout' object.\n */\nexport const useJsonFormsLayout = (props: LayoutProps) => {\n  const { control, ...other } = useControl(props, mapStateToLayoutProps);\n  return { layout: control, ...other };\n};\n\n/**\n * Provides bindings for 'Control' elements which resolve to 'array' elements which\n * shall be rendered as a layout instead of a control.\n *\n * Access bindings via the provided reactive 'layout' object.\n */\nexport const useJsonFormsArrayLayout = (props: ControlProps) => {\n  const { control, ...other } = useControl(props, mapStateToArrayLayoutProps);\n  return { layout: control, ...other };\n};\n\n/**\n * Provides bindings for list elements of a master-list-detail control setup.\n * The element using this binding is not supposed to be registered as an own renderer\n * but used in a more specialized control.\n *\n * Access bindings via the provided reactive 'item' object.\n */\nexport const useJsonFormsMasterListItem = (props: OwnPropsOfMasterListItem) => {\n  const { control, ...other } = useControl<\n    Omit<OwnPropsOfMasterListItem, 'handleSelect' | 'removeItem'>,\n    unknown,\n    OwnPropsOfMasterListItem\n  >(props, mapStateToMasterListItemProps);\n  return { item: control, ...other };\n};\n\n/**\n * Provides specialized bindings which can be used for any renderer.\n * Useful for meta elements like dispatchers.\n *\n * Access bindings via the provided reactive 'renderer' object.\n */\nexport const useJsonFormsRenderer = (props: RendererProps) => {\n  const jsonforms = inject<JsonFormsSubStates>('jsonforms');\n  const dispatch = inject<Dispatch<CoreActions>>('dispatch');\n\n  if (!jsonforms || !dispatch) {\n    throw \"'jsonforms' or 'dispatch' couldn't be injected. Are you within JSON Forms?\";\n  }\n\n  const rawProps = computed(\n    () =>\n      mapStateToJsonFormsRendererProps(\n        { jsonforms },\n        props\n      ) as Required<StatePropsOfJsonFormsRenderer>\n  );\n\n  const rootSchema = computed(() => rawProps.value.rootSchema);\n  const renderer = computed(() => {\n    const { rootSchema, ...rest} = rawProps.value;\n    return rest;\n  });\n\n  return {\n    renderer,\n    rootSchema\n  };\n};\n\n/**\n * Provides bindings for 'Label' elements.\n *\n * Access bindings via the provided reactive `label` object.\n */\nexport const useJsonFormsLabel = (props: RendererProps<LabelElement>) => {\n  const { control, ...other } = useControl(props, mapStateToLabelProps);\n  return { label: control, ...other };\n};\n\n/**\n * Provides bindings for cell elements. Cells are meant to show simple inputs,\n * for example without error validation, within a larger structure like tables.\n *\n * Access bindings via the provided reactive 'cell' object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsCell = (props: ControlProps) => {\n  const { control, ...other } = useControl(\n    props,\n    mapStateToCellProps,\n    mapDispatchToControlProps\n  );\n  return { cell: control, ...other };\n};\n\n/**\n * Provides bindings for enum cell elements. Cells are meant to show simple inputs,\n * for example without error validation, within a larger structure like tables.\n *\n * Access bindings via the provided reactive 'cell' object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsEnumCell = (props: ControlProps) => {\n  const { control, ...other } = useControl(\n    props,\n    defaultMapStateToEnumCellProps,\n    mapDispatchToControlProps\n  );\n  return { cell: control, ...other };\n};\n\n/**\n * Provides bindings for 'oneOf' enum cell elements. Cells are meant to show simple inputs,\n * for example without error validation, within a larger structure like tables.\n *\n * Access bindings via the provided reactive 'cell' object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsOneOfEnumCell = (props: ControlProps) => {\n  const { control, ...other } = useControl(\n      props,\n      mapStateToOneOfEnumCellProps,\n      mapDispatchToControlProps\n  );\n  return { cell: control, ...other };\n};\n\n/**\n * Provides bindings for a cell dispatcher. Cells are meant to show simple inputs,\n * for example without error validation, within a larger structure like tables.\n *\n * Access bindings via the provided reactive 'cell' object.\n * Dispatch changes via the provided `handleChange` method.\n */\nexport const useJsonFormsDispatchCell = (props: ControlProps) => {\n  const { control, ...other } = useControl(\n    props,\n    mapStateToDispatchCellProps,\n    mapDispatchToControlProps\n  );\n  return { cell: control, ...other };\n};\n", "<template>\n  <component v-bind:is=\"determinedRenderer\" v-bind=\"renderer\"></component>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport UnknownRenderer from './UnknownRenderer.vue';\nimport maxBy from 'lodash/maxBy';\nimport { rendererProps, useJsonFormsRenderer } from '../jsonFormsCompositions';\n\nexport default defineComponent({\n  name: 'dispatch-renderer',\n  props: {\n    ...rendererProps()\n  },\n  setup(props) {\n    return useJsonFormsRenderer(props);\n  },\n  computed: {\n    determinedRenderer(): any {\n      const testerContext = { rootSchema: this.rootSchema, config: this.config };\n      const renderer = maxBy(this.renderer.renderers, r =>\n        r.tester(this.renderer.uischema, this.renderer.schema, testerContext)\n      );\n      if (\n        renderer === undefined ||\n        renderer.tester(this.renderer.uischema, this.renderer.schema, testerContext) === -1\n      ) {\n        return UnknownRenderer;\n      } else {\n        return renderer.renderer;\n      }\n    }\n  }\n});\n</script>\n", "<template>\n  <component v-bind:is=\"determinedRenderer\" v-bind=\"renderer\"></component>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport UnknownRenderer from './UnknownRenderer.vue';\nimport maxBy from 'lodash/maxBy';\nimport { rendererProps, useJsonFormsRenderer } from '../jsonFormsCompositions';\n\nexport default defineComponent({\n  name: 'dispatch-renderer',\n  props: {\n    ...rendererProps()\n  },\n  setup(props) {\n    return useJsonFormsRenderer(props);\n  },\n  computed: {\n    determinedRenderer(): any {\n      const testerContext = { rootSchema: this.rootSchema, config: this.config };\n      const renderer = maxBy(this.renderer.renderers, r =>\n        r.tester(this.renderer.uischema, this.renderer.schema, testerContext)\n      );\n      if (\n        renderer === undefined ||\n        renderer.tester(this.renderer.uischema, this.renderer.schema, testerContext) === -1\n      ) {\n        return UnknownRenderer;\n      } else {\n        return renderer.renderer;\n      }\n    }\n  }\n});\n</script>\n", "<template>\n  <component v-bind:is=\"determinedCell\" v-bind=\"cell\"></component>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport UnknownRenderer from './UnknownRenderer.vue';\nimport maxBy from 'lodash/maxBy';\nimport {\n  rendererProps,\n  useJsonFormsDispatchCell\n} from '../jsonFormsCompositions';\nimport { ControlElement } from '@jsonforms/core';\n\nexport default defineComponent({\n  name: 'dispatch-cell',\n  props: {\n    ...rendererProps<ControlElement>()\n  },\n  setup(props) {\n    return useJsonFormsDispatchCell(props);\n  },\n  computed: {\n    determinedCell(): any {\n      const testerContext = { rootSchema: this.cell.rootSchema, config: this.config };\n      const cell = maxBy(this.cell.cells, r =>\n        r.tester(this.cell.uischema, this.cell.schema, testerContext)\n      );\n      if (\n        cell === undefined ||\n        cell.tester(this.cell.uischema, this.cell.schema, testerContext) === -1\n      ) {\n        return UnknownRenderer;\n      } else {\n        return cell.cell;\n      }\n    }\n  }\n});\n</script>\n", "<template>\n  <component v-bind:is=\"determinedCell\" v-bind=\"cell\"></component>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport UnknownRenderer from './UnknownRenderer.vue';\nimport maxBy from 'lodash/maxBy';\nimport {\n  rendererProps,\n  useJsonFormsDispatchCell\n} from '../jsonFormsCompositions';\nimport { ControlElement } from '@jsonforms/core';\n\nexport default defineComponent({\n  name: 'dispatch-cell',\n  props: {\n    ...rendererProps<ControlElement>()\n  },\n  setup(props) {\n    return useJsonFormsDispatchCell(props);\n  },\n  computed: {\n    determinedCell(): any {\n      const testerContext = { rootSchema: this.cell.rootSchema, config: this.config };\n      const cell = maxBy(this.cell.cells, r =>\n        r.tester(this.cell.uischema, this.cell.schema, testerContext)\n      );\n      if (\n        cell === undefined ||\n        cell.tester(this.cell.uischema, this.cell.schema, testerContext) === -1\n      ) {\n        return UnknownRenderer;\n      } else {\n        return cell.cell;\n      }\n    }\n  }\n});\n</script>\n", "<template>\n  <dispatch-renderer\n    v-bind:schema=\"jsonforms.core.schema\"\n    v-bind:uischema=\"jsonforms.core.uischema\"\n    v-bind:path=\"''\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { PropType } from 'vue';\nimport { defineComponent } from 'vue';\nimport {\n  coreReducer,\n  Actions,\n  Generate,\n  configReducer,\n  JsonSchema,\n  UISchemaElement,\n  ValidationMode,\n  JsonFormsCore,\n  JsonFormsUISchemaRegistryEntry,\n  JsonFormsRendererRegistryEntry,\n  JsonFormsCellRendererRegistryEntry,\n  CoreActions,\n  i18nReducer,\n  JsonFormsI18nState\n} from '@jsonforms/core';\nimport { JsonFormsChangeEvent, MaybeReadonly } from '../types';\nimport DispatchRenderer from './DispatchRenderer.vue';\n\nimport Ajv, { ErrorObject } from 'ajv';\n\nconst isObject = (elem: any): elem is Object => {\n  return elem && typeof elem === 'object';\n};\n\nexport default defineComponent({\n  name: 'json-forms',\n  components: {\n    DispatchRenderer\n  },\n  emits: ['change'],\n  props: {\n    data: {\n      required: true,\n      type: [String, Number, Boolean, Array, Object] as PropType<any>\n    },\n    schema: {\n      required: false,\n      type: [Object, Boolean] as PropType<JsonSchema>,\n      default: undefined\n    },\n    uischema: {\n      required: false,\n      type: Object as PropType<UISchemaElement>,\n      default: undefined\n    },\n    renderers: {\n      required: true,\n      type: Array as PropType<MaybeReadonly<JsonFormsRendererRegistryEntry[]>>\n    },\n    cells: {\n      required: false,\n      type: Array as PropType<MaybeReadonly<JsonFormsCellRendererRegistryEntry[]>>,\n      default: () => []\n    },\n    config: {\n      required: false,\n      type: Object as PropType<any>,\n      default: undefined\n    },\n    readonly: {\n      required: false,\n      type: Boolean,\n      default: false\n    },\n    uischemas: {\n      required: false,\n      type: Array as PropType<MaybeReadonly<JsonFormsUISchemaRegistryEntry[]>>,\n      default: () => []\n    },\n    validationMode: {\n      required: false,\n      type: String as PropType<ValidationMode>,\n      default: 'ValidateAndShow'\n    },\n    ajv: {\n      required: false,\n      type: Object as PropType<Ajv>,\n      default: undefined\n    },\n    i18n: {\n      required: false,\n      type: Object as PropType<JsonFormsI18nState>,\n      default: undefined\n    },\n    additionalErrors: {\n      required: false,\n      type: Array as PropType<ErrorObject[]>,\n      default: () => []\n    },\n  },\n  data() {\n    const generatorData = isObject(this.data) ? this.data : {};\n    const schemaToUse = this.schema ?? Generate.jsonSchema(generatorData);\n    const uischemaToUse = this.uischema ?? Generate.uiSchema(schemaToUse);\n    const initCore = (): JsonFormsCore => {\n      const initialCore = {\n        data: this.data,\n        schema: schemaToUse,\n        uischema: uischemaToUse\n      };\n      const core = coreReducer(\n        initialCore,\n        Actions.init(this.data, schemaToUse, uischemaToUse, {\n          validationMode: this.validationMode,\n          ajv: this.ajv,\n          additionalErrors: this.additionalErrors\n        })\n      );\n      return core;\n    };\n    return {\n      schemaToUse,\n      uischemaToUse,\n      jsonforms: {\n        core: initCore(),\n        config: configReducer(undefined, Actions.setConfig(this.config)),\n        i18n: i18nReducer(this.i18n, Actions.updateI18n(this.i18n?.locale, this.i18n?.translate, this.i18n?.translateError)),\n        renderers: this.renderers,\n        cells: this.cells,\n        uischemas: this.uischemas,\n        readonly: this.readonly\n      }\n    };\n  },\n  watch: {\n    schema(newSchema) {\n      const generatorData = isObject(this.data) ? this.data : {};\n      this.schemaToUse = newSchema ?? Generate.jsonSchema(generatorData);\n      if (!this.uischema) {\n        this.uischemaToUse = Generate.uiSchema(this.schemaToUse);\n      }\n    },\n    uischema(newUischema) {\n      this.uischemaToUse = newUischema ?? Generate.uiSchema(this.schemaToUse);\n    },\n    renderers(newRenderers) {\n      this.jsonforms.renderers = newRenderers;\n    },\n    cells(newCells) {\n      this.jsonforms.cells = newCells;\n    },\n    uischemas(newUischemas) {\n      this.jsonforms.uischemas = newUischemas;\n    },\n    config: {\n      handler(newConfig) {\n        this.jsonforms.config = configReducer(\n          undefined,\n          Actions.setConfig(newConfig)\n        );\n      },\n      deep: true\n    },\n    readonly(newReadonly) {\n      this.jsonforms.readonly = newReadonly;\n    },\n    coreDataToUpdate() {\n      this.jsonforms.core = coreReducer(\n        this.jsonforms.core as JsonFormsCore,\n        Actions.updateCore(this.data, this.schemaToUse, this.uischemaToUse, {\n          validationMode: this.validationMode,\n          ajv: this.ajv,\n          additionalErrors: this.additionalErrors\n        })\n      );\n    },\n    eventToEmit(newEvent) {\n      this.$emit('change', newEvent);\n    },\n    i18n: {\n      handler(newI18n) {\n        this.jsonforms.i18n = i18nReducer(\n          this.jsonforms.i18n,\n          Actions.updateI18n(newI18n?.locale, newI18n?.translate, newI18n?.translateError)\n        );\n      },\n      deep: true\n    }\n  },\n  computed: {\n    coreDataToUpdate(): any {\n      return [\n        this.data,\n        this.schemaToUse,\n        this.uischemaToUse,\n        this.validationMode,\n        this.ajv,\n        this.additionalErrors\n      ];\n    },\n    eventToEmit(): JsonFormsChangeEvent {\n      return {\n        data: this.jsonforms.core.data,\n        errors: this.jsonforms.core.errors\n      };\n    }\n  },\n  mounted() {\n    // emit an inital change so clients can react to error validation and default data insertion\n    this.$emit('change', {\n      data: this.jsonforms.core.data,\n      errors: this.jsonforms.core.errors\n    });\n  },\n  methods: {\n    dispatch(action: CoreActions) {\n      this.jsonforms.core = coreReducer(this.jsonforms.core as JsonFormsCore, action);\n    }\n  },\n  provide() {\n    return {\n      jsonforms: this.jsonforms,\n      dispatch: this.dispatch\n    };\n  }\n});\n</script>\n", "<template>\n  <dispatch-renderer\n    v-bind:schema=\"jsonforms.core.schema\"\n    v-bind:uischema=\"jsonforms.core.uischema\"\n    v-bind:path=\"''\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { PropType } from 'vue';\nimport { defineComponent } from 'vue';\nimport {\n  coreReducer,\n  Actions,\n  Generate,\n  configReducer,\n  JsonSchema,\n  UISchemaElement,\n  ValidationMode,\n  JsonFormsCore,\n  JsonFormsUISchemaRegistryEntry,\n  JsonFormsRendererRegistryEntry,\n  JsonFormsCellRendererRegistryEntry,\n  CoreActions,\n  i18nReducer,\n  JsonFormsI18nState\n} from '@jsonforms/core';\nimport { JsonFormsChangeEvent, MaybeReadonly } from '../types';\nimport DispatchRenderer from './DispatchRenderer.vue';\n\nimport Ajv, { ErrorObject } from 'ajv';\n\nconst isObject = (elem: any): elem is Object => {\n  return elem && typeof elem === 'object';\n};\n\nexport default defineComponent({\n  name: 'json-forms',\n  components: {\n    DispatchRenderer\n  },\n  emits: ['change'],\n  props: {\n    data: {\n      required: true,\n      type: [String, Number, Boolean, Array, Object] as PropType<any>\n    },\n    schema: {\n      required: false,\n      type: [Object, Boolean] as PropType<JsonSchema>,\n      default: undefined\n    },\n    uischema: {\n      required: false,\n      type: Object as PropType<UISchemaElement>,\n      default: undefined\n    },\n    renderers: {\n      required: true,\n      type: Array as PropType<MaybeReadonly<JsonFormsRendererRegistryEntry[]>>\n    },\n    cells: {\n      required: false,\n      type: Array as PropType<MaybeReadonly<JsonFormsCellRendererRegistryEntry[]>>,\n      default: () => []\n    },\n    config: {\n      required: false,\n      type: Object as PropType<any>,\n      default: undefined\n    },\n    readonly: {\n      required: false,\n      type: Boolean,\n      default: false\n    },\n    uischemas: {\n      required: false,\n      type: Array as PropType<MaybeReadonly<JsonFormsUISchemaRegistryEntry[]>>,\n      default: () => []\n    },\n    validationMode: {\n      required: false,\n      type: String as PropType<ValidationMode>,\n      default: 'ValidateAndShow'\n    },\n    ajv: {\n      required: false,\n      type: Object as PropType<Ajv>,\n      default: undefined\n    },\n    i18n: {\n      required: false,\n      type: Object as PropType<JsonFormsI18nState>,\n      default: undefined\n    },\n    additionalErrors: {\n      required: false,\n      type: Array as PropType<ErrorObject[]>,\n      default: () => []\n    },\n  },\n  data() {\n    const generatorData = isObject(this.data) ? this.data : {};\n    const schemaToUse = this.schema ?? Generate.jsonSchema(generatorData);\n    const uischemaToUse = this.uischema ?? Generate.uiSchema(schemaToUse);\n    const initCore = (): JsonFormsCore => {\n      const initialCore = {\n        data: this.data,\n        schema: schemaToUse,\n        uischema: uischemaToUse\n      };\n      const core = coreReducer(\n        initialCore,\n        Actions.init(this.data, schemaToUse, uischemaToUse, {\n          validationMode: this.validationMode,\n          ajv: this.ajv,\n          additionalErrors: this.additionalErrors\n        })\n      );\n      return core;\n    };\n    return {\n      schemaToUse,\n      uischemaToUse,\n      jsonforms: {\n        core: initCore(),\n        config: configReducer(undefined, Actions.setConfig(this.config)),\n        i18n: i18nReducer(this.i18n, Actions.updateI18n(this.i18n?.locale, this.i18n?.translate, this.i18n?.translateError)),\n        renderers: this.renderers,\n        cells: this.cells,\n        uischemas: this.uischemas,\n        readonly: this.readonly\n      }\n    };\n  },\n  watch: {\n    schema(newSchema) {\n      const generatorData = isObject(this.data) ? this.data : {};\n      this.schemaToUse = newSchema ?? Generate.jsonSchema(generatorData);\n      if (!this.uischema) {\n        this.uischemaToUse = Generate.uiSchema(this.schemaToUse);\n      }\n    },\n    uischema(newUischema) {\n      this.uischemaToUse = newUischema ?? Generate.uiSchema(this.schemaToUse);\n    },\n    renderers(newRenderers) {\n      this.jsonforms.renderers = newRenderers;\n    },\n    cells(newCells) {\n      this.jsonforms.cells = newCells;\n    },\n    uischemas(newUischemas) {\n      this.jsonforms.uischemas = newUischemas;\n    },\n    config: {\n      handler(newConfig) {\n        this.jsonforms.config = configReducer(\n          undefined,\n          Actions.setConfig(newConfig)\n        );\n      },\n      deep: true\n    },\n    readonly(newReadonly) {\n      this.jsonforms.readonly = newReadonly;\n    },\n    coreDataToUpdate() {\n      this.jsonforms.core = coreReducer(\n        this.jsonforms.core as JsonFormsCore,\n        Actions.updateCore(this.data, this.schemaToUse, this.uischemaToUse, {\n          validationMode: this.validationMode,\n          ajv: this.ajv,\n          additionalErrors: this.additionalErrors\n        })\n      );\n    },\n    eventToEmit(newEvent) {\n      this.$emit('change', newEvent);\n    },\n    i18n: {\n      handler(newI18n) {\n        this.jsonforms.i18n = i18nReducer(\n          this.jsonforms.i18n,\n          Actions.updateI18n(newI18n?.locale, newI18n?.translate, newI18n?.translateError)\n        );\n      },\n      deep: true\n    }\n  },\n  computed: {\n    coreDataToUpdate(): any {\n      return [\n        this.data,\n        this.schemaToUse,\n        this.uischemaToUse,\n        this.validationMode,\n        this.ajv,\n        this.additionalErrors\n      ];\n    },\n    eventToEmit(): JsonFormsChangeEvent {\n      return {\n        data: this.jsonforms.core.data,\n        errors: this.jsonforms.core.errors\n      };\n    }\n  },\n  mounted() {\n    // emit an inital change so clients can react to error validation and default data insertion\n    this.$emit('change', {\n      data: this.jsonforms.core.data,\n      errors: this.jsonforms.core.errors\n    });\n  },\n  methods: {\n    dispatch(action: CoreActions) {\n      this.jsonforms.core = coreReducer(this.jsonforms.core as JsonFormsCore, action);\n    }\n  },\n  provide() {\n    return {\n      jsonforms: this.jsonforms,\n      dispatch: this.dispatch\n    };\n  }\n});\n</script>\n"],
  "mappings": "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",
  "names": ["defineComponent", "name", "_createElementBlock", "rendererProps", "schema", "required", "type", "Object", "Boolean", "uischema", "path", "String", "enabled", "undefined", "renderers", "Array", "cells", "config", "masterListItemProps", "index", "Number", "selected", "handleSelect", "Function", "removeItem", "useControl", "props", "stateMap", "dispatchMap", "jsonforms", "inject", "dispatch", "id", "ref", "control", "computed", "value", "dispatchMethods", "onBeforeMount", "scope", "createId", "onUnmounted", "removeId", "useJsonFormsControl", "mapStateToControlProps", "mapDispatchToControlProps", "useJsonFormsControlWithDetail", "mapStateToControlWithDetailProps", "useJsonFormsEnumControl", "mapStateToEnumControlProps", "useJsonFormsOneOfEnumControl", "mapStateToOneOfEnumControlProps", "useJsonFormsArrayControl", "mapStateToArrayControlProps", "mapDispatchToArrayControlProps", "useJsonFormsAllOfControl", "mapStateToAllOfProps", "useJsonFormsAnyOfControl", "mapStateToAnyOfProps", "useJsonFormsOneOfControl", "mapStateToOneOfProps", "useJsonFormsMultiEnumControl", "mapStateToMultiEnumControlProps", "mapDispatchToMultiEnumProps", "useJsonFormsLayout", "mapStateToLayoutProps", "other", "layout", "useJsonFormsArrayLayout", "mapStateToArrayLayoutProps", "useJsonFormsMasterListItem", "mapStateToMasterListItemProps", "item", "useJsonFormsRenderer", "rawProps", "mapStateToJsonFormsRendererProps", "rootSchema", "renderer", "rest", "useJsonFormsLabel", "mapStateToLabelProps", "label", "useJsonFormsCell", "mapStateToCellProps", "cell", "useJsonFormsEnumCell", "defaultMapStateToEnumCellProps", "useJsonFormsOneOfEnumCell", "mapStateToOneOfEnumCellProps", "useJsonFormsDispatchCell", "mapStateToDispatchCellProps", "setup", "determinedRenderer", "testerContext", "maxBy", "r", "tester", "UnknownRenderer", "_createBlock", "_ctx", "determinedCell", "isObject", "elem", "components", "DispatchRenderer", "emits", "data", "readonly", "uischemas", "_default", "validationMode", "ajv", "i18n", "additionalErrors", "generatorData", "schemaToUse", "Generate", "jsonSchema", "uischemaToUse", "uiSchema", "initCore", "initialCore", "core", "coreReducer", "Actions", "init", "configReducer", "setConfig", "i18nReducer", "updateI18n", "locale", "translate", "translateError", "watch", "newSchema", "newUischema", "newRenderers", "newCells", "newUischemas", "handler", "newConfig", "deep", "newReadonly", "coreDataToUpdate", "updateCore", "eventToEmit", "newEvent", "$emit", "newI18n", "errors", "mounted", "methods", "action", "provide"]
}
